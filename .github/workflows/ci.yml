name: CI Docker

on:
  push:
    branches:
    - docker

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - 
        uses: actions/checkout@v2
        name: Checkout!
      - 
        name: test
        run: |
          set -x
          docker build -t test .
          docker run -d --name testcontainer test
          while [ true ]
          do \
            sleep 10
            docker exec testcontainer ps | grep 'php -f index.php' && break
          done
          while [ true ]
          do \
            sleep 10
            docker logs testcontainer 2>& 1 | grep 'PHP .* Development Server .* started' && break 
          done
  
  swarm:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checking out!
        uses: actions/checkout@v2
      - 
        name: test
        run: |
          set -x
          docker build -t belcebus/phpinfo-2:testing . 
          docker swarm init
          PROJECT=phpinfo-2
          COMPOSE=etc/swarm/manifests/${PROJECT}.yml
          sed -i /image:/s/latest/testing/ ${COMPOSE}
          sed -i /node.role/s/worker/manager/ ${COMPOSE}
          #Despliegue en OS
          #oc apply -f ${COMPOSE}
          #Despliegue en k8s
          #kubectl apply -f ${COMPOSE}
          #Despleigue en Swarm
          docker stack deploy -c ${COMPOSE} ${PROJECT}
          while true
            do \
              sleep 10
              #Un numero , barra, y el mismo numero es la expresion regular siguiente
              docker service ls | grep "${PROJECT}.*\([0-9]\)/\1" && break
            done
          while true
            do \
              sleep 10
              docker service logs ${PROJECT}_${PROJECT} 2>& 1 | grep 'PHP .* Development Server .* started' && break
            done

  kubernetes:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Checking out!
        uses: actions/checkout@v2
      - 
        name: test
        run: |
          set -x
          docker build -t belcebus/phpinfo-2:testing . 
          # instalar kubernetes en ubuntu
          sudo apt-get update
          #sudo apt-get install -y docker.io
          sudo systemctl enable --now docker
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo deb http://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          KUBEVERSION=1.18.14-00
          sudo apt-get install -y --allow-downgrades kubelet=${KUBEVERSION} kubeadm=${KUBEVERSION} kubectl=${KUBEVERSION}
          sudo systemctl enable --now kubelet
          # inicializar kubernetes
          IP_LEADER=$( ip r | grep default | awk '{ print $9 }' )
          echo ${IP_LEADER} kube-apiserver | sudo tee -a /etc/hosts
          sudo swapoff --all 
          sudo kubeadm init --upload-certs --control-plane-endpoint kube-apiserver --pod-network-cidr 192.168.0.0/16 --ignore-preflight-errors all
          # copiamos las credenciales a nuestro directorio
          mkdir -p ${HOME}/.kube
          sudo cp /etc/kubernetes/admin.conf ${HOME}/.kube/config
          sudo chown -R $( id -u ):$( id -g ) ${HOME}/.kube
          # crear la red
          kubectl apply -f https://docs.projectcalico.org/v3.17/manifests/calico.yaml
          # comprobar que el cluster esta listo
          while true
            do \
              kubectl get node | grep Ready | grep -v NotReady && break
              sleep 10
            done
          # limpiar la configuracion
          sudo sed -i /kube-apiserver/d /etc/hosts
          sudo sed -i /127.0.0.1.*localhost/s/$/' 'kube-apiserver/ /etc/hosts
          #habilitar el master
          MASTER=$( kubectl get node | grep master | awk '{ print $1 }' )
          # destintamos del master el efecto noschedule para que se puedan desplegar
          kubectl taint node ${MASTER} node-role.kubernetes.io/master:NoSchedule-

          PROJECT=phpinfo-2
          COMPOSE=etc/kubernetes/manifests/${PROJECT}.yml
          sed -i /image:/s/latest/testing/ ${COMPOSE}
          sed -i /imagePullPolicy/s/Always/Never/ ${COMPOSE}
          #Despliegue en OS
          #oc apply -f ${COMPOSE}
          #Despliegue en k8s
          kubectl apply -f ${COMPOSE}
          #Despleigue en Swarm
          #docker stack deploy -c ${COMPOSE} ${PROJECT}
          while true
            do \
              sleep 10
              #Un numero , barra, y el mismo numero es la expresion regular siguiente
              kubectl get deploy | grep "${PROJECT}.*\([0-9]\)/\1" && break
            done
          while true
            do \
              sleep 10
              kubectl logs deploy/${PROJECT} 2>& 1 | grep 'PHP .* Development Server .* started' && break
            done